english for assignments 1.10-1.12

EXERCISE 1.10 MyDate.java

The MyDate class contains the following private instance variables:
year (int): Between 1 to 9999.
month (int): Between 1 (Jan) to 12 (Dec).
day (int): Between 1 to 28|29|30|31, where the last day depends on the month and
	whether it is a leap year for Feb (28|29).
It also contains the following private static variables:
strMonths (String[]), strDays (String[]), and dayInMonths (int[]): static variables

The MyDate class has the following public static methods:
isLeapYear(int year): returns true if the given year is a leap year.
	A year is a leap year if it is divisible by 4 but not by 100, or it is divisible by 400.
isValidDate(int year, int month, int day): returns true if the given year, month, and day
	constitute a valid date. Assume that year is between 1 and 9999, month is between 1 (Jan) to 12 (Dec) and day shall be between 1 and 28|29|30|31 depending on the month and whether it is a leap year on Feb.
getDayOfWeek(int year, int month, int day): returns the day of the week,
	where 0 for Sun, 1 for Mon, ..., 6 for Sat, for the given date.
	Assume that the date is valid
The MyDate class has one constructor, which takes 3 parameters: year, month and day.
	It shall invoke setDate() method (to be described later) to set the instance variables.

The MyDate class has the following public methods:
setDate(int year, int month, int day): It shall invoke the static method isValidDate()
	to verify that the given year, month and day constitute a valid date.
(Advanced: Otherwise, it shall throw an IllegalArgumentException with the message
	"Invalid year, month, or day!".)
setYear(int year): It shall verify that the given year is between 1 and 9999.
(Advanced: Otherwise, it shall throw an IllegalArgumentException with the message
	"Invalid year!".)
setMonth(int month): It shall verify that the given month is between 1 and 12.
(Advanced: Otherwise, it shall throw an IllegalArgumentException with the message
	"Invalid month!".)
setDay(int day): It shall verify that the given day is between 1 and dayMax,
	where dayMax depends on the month and whether it is a leap year for Feb.
(Advanced: Otherwise, it shall throw an IllegalArgumentException with the message
	"Invalid month!".)
getYear(), getMonth(), getDay(): return the value for the year, month and day, respectively.
toString(): returns a date string in the format "xxxday d mmm yyyy", e.g., "Tuesday 14 Feb 2012".
nextDay(): update this instance to the next day and return this instance.
	Take note that nextDay() for 31 Dec 2000 shall be 1 Jan 2001.
nextMonth(): update this instance to the next month and return this instance.
	Take note that nextMonth() for 31 Oct 2012 shall be 30 Nov 2012.
nextYear(): update this instance to the next year and return this instance.
	Take note that nextYear() for 29 Feb 2012 shall be 28 Feb 2013.
(Advanced: throw an IllegalStateException with the message "Year out of range!"
	if year > 9999.)
previousDay(), previousMonth(), previousYear(): similar to the above.


Test:
		MyDate d1 = new MyDate(2012, 2, 28);
		System.out.println(d1);             // Tuesday 28 Feb 2012
		System.out.println("next day is " + d1.nextDay());   // Wednesday 29 Feb 2012
		System.out.println("next day is " + d1.nextDay());   // Thursday 1 Mar 2012
		System.out.println("next month is " + d1.nextMonth()); // Sunday 1 Apr 2012
		System.out.println("next year is " + d1.nextYear());  // Monday 1 Apr 2013

		MyDate d2 = new MyDate(2012, 1, 2);
		System.out.println(d2);                 // Monday 2 Jan 2012
		System.out.println(d2.previousDay());   // Sunday 1 Jan 2012
		System.out.println(d2.previousDay());   // Saturday 31 Dec 2011
		System.out.println(d2.previousMonth()); // Wednesday 30 Nov 2011
		System.out.println(d2.previousYear());  // Tuesday 30 Nov 2010

		MyDate d3 = new MyDate(2012, 2, 29);
		System.out.println(d3.previousYear());  // Monday 28 Feb 2011

		MyDate d4 = new MyDate(2099, 11, 31); // Invalid year, month, or day!
		MyDate d5 = new MyDate(2011, 2, 29);  // Invalid year, month, or day!
		System.out.println(d4.nextDay());   // Thursday 1 Mar 2012

Results:

Monday 28 Feb 2012
next day is Tuesday 29 Feb 2012
next day is Tuesday 1 Feb 2012
next month is Friday 1 Mar 2012
next year is Friday 1 Mar 2013
Saturday 2 Jan 2012
Friday 1 Jan 2012
Thursday 31 Dec 2011
Monday 31 Nov 2011
Monday 31 Nov 2010
Tuesday 29 Feb 2011
Friday 1  0

----------------------------------------------------------------------------------------
EXERCISE 1.11 Book.java


/*
 * EXERCISE 1.11 Book and Author Classes Again - An Array of Objects as an Instance Variable
 * In the earlier exercise, a book is written by one and only one author. In reality, a book can be written by one or more author.
 * Modify the Book class to support one or more authors by changing the instance variable authors to an Author array.
 * Reuse the Author class written earlier.
Notes:
The constructors take an array of Author (i.e., Author[]), instead of an Author instance.
The toString() method shall return "book-name by n authors", where n is the number of authors.
A new method printAuthors() to print the names of all the authors.
You are required to:
Write the code for the Book class. You shall re-use the Author class written earlier.
Write a test program (called TestBook) to test the Book class.
 */

/*
 * EXERCISE 1.12
 * In the above exercise, the number of authors cannot be changed once a Book instance is constructed.
 * Suppose that we wish to allow the user to add more authors (which is really unusual but presented here for academic purpose).
We shall remove the authors from the constructors, and add a new method called addAuthor() to add the given Author instance to this Book.
We also need to pre-allocate an Author array, with a fixed length (says 5 - a book is written by 1 to 5 authors),
and use another instance variable numAuthors (int) to keep track of the actual number of authors.
You are required to:
Modify your Book class to support this new requirement.
 */
 
 TEST:
 
 			/*
		//exercise 11 test program below
		// Declare and allocate an array of Authors
		Author[] authors = new Author[2];
		authors[0] = new Author("Tan Ah Teck", "AhTeck@somewhere.com", 'm');
		authors[1] = new Author("Paul Tan", "Paul@nowhere.com", 'm');
		 
		// Declare and allocate a Book instance
		Book javaDummy = new Book("Java for Dummy", authors, 19.99, 99);
		System.out.println(javaDummy);  // toString()
		System.out.print("The authors are: ");
		javaDummy.printAuthors();
		*/
		
		//exercise 12 test program
		// Test program
		Book javaDummy = new Book("Java for Dummy", 19.99, 99);
		System.out.println(javaDummy);  // toString()
		System.out.print("The authors are: ");
		javaDummy.printAuthors();
		 
		javaDummy.addAuthor(new Author("Tan Ah Teck", "AhTeck@somewhere.com", 'm'));
		javaDummy.addAuthor(new Author("Paul Tan", "Paul@nowhere.com", 'm'));
		System.out.println(javaDummy);  // toString()
		System.out.print("The authors are: ");
		javaDummy.printAuthors();
		
RESULTS:

'Java for Dummy' by 5 author(s)
The authors are: 'Java for Dummy' by 5 author(s)
The authors are: Tan Ah Teck (m) at AhTeck@somewhere.com, Paul Tan (m) at Paul@nowhere.com


These all run as expected.
